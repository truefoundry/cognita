# from src.serve.llm.llm_huggingface import HuggingFace_LLM
from langchain.llms.base import LLM
from langchain.callbacks.manager import (
    AsyncCallbackManagerForLLMRun,
    CallbackManagerForLLMRun,
)
import typing
import requests


class TfyPlaygroundLLM(LLM):
    name: str
    provider: str
    tag: str
    parameters: dict
    api_key: str
    endpoint_url: str

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "tfy_playground_llm"

    @property
    def _identifying_params(self) -> typing.Mapping[str, typing.Any]:
        """Get the identifying parameters."""
        return {"name": self.name, "provider": self.provider, "tag": self.tag}

    def _call(
        self,
        prompt: str,
        stop: typing.Optional[typing.List[str]] = None,
        run_manager: typing.Optional[CallbackManagerForLLMRun] = None,
        **params: typing.Any,
    ) -> str:
        """Call out to the deployed model

        Args:
            prompt: The prompt to pass into the model.
            stop: Optional list of stop words to use when generating.

        Returns:
            The string generated by the model.

        Example:
            .. code-block:: python

                response = model("Tell me a joke.")
        """
        try:
            payload = {
                "prompt": prompt,
                "models": [
                    {
                        "name": self.name,
                        "provider": self.provider,
                        "tag": self.tag,
                        "parameters": self.parameters,
                    }
                ],
            }
            response = requests.post(
                self.endpoint_url,
                json=payload,
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                },
            )
            response.raise_for_status()
            data = response.json()
            return data[0].get("text")
        except Exception as e:
            raise Exception(f"Error raised by inference API: {e}") from e
